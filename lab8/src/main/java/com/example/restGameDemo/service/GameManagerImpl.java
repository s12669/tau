package com.example.restGameDemo.service;

// w oparciu o przyklad J Neumanna, przerobiony przez T Puzniakowskiego

import com.example.restGameDemo.domain.Game;
import org.springframework.stereotype.Component;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;

@Component
public class GameManagerImpl implements GameManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	private String userName = "SA";
	private String password = "";

	private String createTableGame =
			"CREATE TABLE Game(id bigint GENERATED BY DEFAULT AS IDENTITY,"+
					"title varchar(40), dirn varchar(20), dirsurn varchar(20), company varchar(30), price varchar(8))";

	private PreparedStatement addGameStatement;
	private PreparedStatement deleteGameStatement;
	private PreparedStatement getAllGamesStatement;
	private PreparedStatement getOneGameStatement;
	private PreparedStatement updateGameStatement;

	private Statement statement;


	public GameManagerImpl() throws SQLException {
		connection = DriverManager.getConnection(url, userName, password);
		statement = connection.createStatement();

		ResultSet rs = connection.getMetaData().getTables(null, null, null,
				null);
		boolean tableExists = false;
		while (rs.next()) {
			if ("Game".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
				tableExists = true;
				break;
			}
		}

		if (!tableExists)
			statement.executeUpdate(createTableGame);

		addGameStatement = connection
				.prepareStatement("INSERT INTO Game (title, dirn, dirsurn, company, price) VALUES (?, ?, ?, ?, ?)");
		deleteGameStatement = connection
				.prepareStatement("DELETE FROM Game where title = ?");
		getOneGameStatement = connection
				.prepareStatement("SELECT id, title, dirn, dirsurn, company, price FROM Game where title = ?");
		updateGameStatement = connection
				.prepareStatement("UPDATE Game SET dirn = ?, dirsurn = ?, company = ?, price = ? where title = ?");
		getAllGamesStatement = connection
				.prepareStatement("SELECT id, title, dirn, dirsurn, company, price FROM Game");

	}

	public Connection getConnection() {
		return connection;
	}

	public int deleteGame(Game game) throws SQLException {
		deleteGameStatement.setString(1, game.getTitle());
		return deleteGameStatement.executeUpdate();

	}

	public int updateGame(Game game) throws SQLException {

		updateGameStatement.setString(1, game.getDirectorName());
		updateGameStatement.setString(2, game.getDirectorSurname());
		updateGameStatement.setString(3, game.getCompany());
		updateGameStatement.setString(4, game.getPrice());
		updateGameStatement.setString(5, game.getTitle());

		return updateGameStatement.executeUpdate();
	}

	public void clearGames() throws SQLException {
		connection.prepareStatement("delete from Game").executeUpdate();
	}
	public int addGame(Game game) {
		int count = 0;
		try {
			addGameStatement.setString(1, game.getTitle());
			addGameStatement.setString(2, game.getDirectorName());
			addGameStatement.setString(3, game.getDirectorSurname());
			addGameStatement.setString(4, game.getCompany());
			addGameStatement.setString(5, game.getPrice());

			count = addGameStatement.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public Game getGame(Game game) {
		Game g = new Game();

		try {
			getOneGameStatement.setString(1, game.getTitle());
			ResultSet rs = getOneGameStatement.executeQuery();

			if (rs.next()) {
				g.setId(rs.getLong("id"));
				g.setTitle(rs.getString("title"));
				g.setDirectorName(rs.getString("dirn"));
				g.setDirectorSurname(rs.getString("dirsurn"));
				g.setCompany(rs.getString("company"));
				g.setPrice(rs.getString("price"));
			} else {
				throw new NoSuchElementException();
			}


		} catch (SQLException e) {
			e.printStackTrace();
		}
		return g;
	}

	public List<Game> getAllGames() {
		List<Game> games = new ArrayList<Game>();

		try {
			ResultSet rs = getAllGamesStatement.executeQuery();

			while (rs.next()) {
				Game g = new Game();

				g.setId(rs.getLong("id"));
				g.setTitle(rs.getString("title"));
				g.setDirectorName(rs.getString("dirn"));
				g.setDirectorSurname(rs.getString("dirsurn"));
				g.setCompany(rs.getString("company"));
				g.setPrice(rs.getString("price"));
				games.add(g);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return games;
	}

}